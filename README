Specification
-------------
"The goal is to write a primitive XML parser using only the standard
glibc library.

The program should:
* read in an xml file, 
* parse it into a data structure of your choosing, and
* print it to the screen.

If an error (such as a mis-matching close tag) is detected, the
program should:
* display an error,
* print the xml read in so far, and
* terminate

For the purposes of this assignment, there is no need to create a
validating parser, so you don't have to worry about DTDs or Schemas.

Additionally, the presence of processing instructions (ie. anything
between '<?' and '?>') and comments (ie. anything between '<!--' and
'-->') should be tolerated but their contents can be ignored."

With that description having quite a bit of leeway, this project defines a
subset of XML called Rudimentary Markup (RuM), a library for defining and
parsing arbitary languages conforming to RuM, a sample language,
and an application to display files written in the sample language.


Rudimentary Markup
------------------
Rudimentary Markup (RuM) is a subset of XML:
* Processing instructions (<?...?>) and comments (<!--...-->) are
  accepted by ignored;
* No <! ... > elements are supported other than comments (<![CDATA[...]]>, <!ENTITY...>, etc.)
* Non-ASCII characters are not supported;
* Numeric character entities (&#DECIMAL; or &#xHEX;) are not supported;
* Content after nested tags is accepted but ignored, for example in the following cases
  the application will always receive "XXX" as the content of T1:
     <T1>XXX</T1>
     <T1>XXX <T2>YYY</T2> </T1>    <!-- YYY is content of T2 -->
     <T1>XXX <T2>YYT</T2> ZZZ</T1> <!-- ZZZ is ignored -->
* Other minor limitations not worth detailing.


Project Components
------------------
* librump.a is the parser library, consisting of:
   * rum_buffer.c and rum_buffer.h: large string buffer handling
   * rum_language.c and rum_language.h: language definition
   * rum_document.c and rum_document.h: document object
   * rump.c: file parsing
   * rump_private.h: header file for use by rump.c only
   * rump.h: overall include file for library
* rum.c: an application that displays files in a sample RuM language
* samples/: sample RuM files, well-formed and not

A "real" project would have a full unit test rather than a handful of sample
files, to give more confidence in the code.
